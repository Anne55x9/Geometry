{
  "name": "Geometry",
  "tagline": "",
  "body": "# Geometry\r\n<H1>Exercise 12</H1>\r\n\r\nDownload or clonethe C# project Geometry.\r\nThis exercise is about defining a new class yourself! In the project, there is a file called Geometry.cs, containing a definition of a class Geometry. However, the definition is empty…\r\n\r\nWe have to fill out the class definition. The requirements to the Geometry class are the following (use Google if you cannot remember basic Geometry ):\r\n<ul>\r\n <li>Given the two side lengths of a rectangle, calculate the perimeter of the rectangle</li>\r\n <li>Given the two side lengths of a rectangle, calculate the area of the rectangle</li>\r\n <li>Given the radius of a circle, calculate the area of the circle</li>\r\n <li>Given the four angles of a polygon with four sides, determine if the polygon is a rectangle (what conditions must the angles fulfill?)</li>\r\n</ul>\r\n\r\n<h2>Given these requirement, your tasks are:</h2>\r\n\r\n4. Fill out the Geometry definition, such that all require-ments are fulfilled. This includes definition of instance fields (are any needed?), constructors and methods\r\n\r\n5. Make some test code that tests your Geometry class. That is, you should create a Geometry object, call the various methods, and check the results against manually calculated results\r\n\r\n6. If you have time left, try to extend the class definition with various interesting geometric methods. It is up to you to define requirements, etc..\r\n\r\nNOTE: This is a fairly large and somewhat difficult exercise. Try to solve it in small steps – get a little bit to work, test it, and then proceed to the next little bit. Manage the complexity!\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}